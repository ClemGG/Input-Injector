//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Inputs/Action Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Project.Player.Input
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Hover"",
            ""id"": ""8475b509-7165-4b43-ba99-639f789871d9"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e8da4b06-e1ad-4255-ae36-27351cbc842f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab90627d-f794-4568-b40a-83bbfd0bcfff"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2a890bfb-5dde-4782-988d-08921504d634"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""816ee429-c5c2-4bd7-95f0-92e29a241d1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grind"",
                    ""type"": ""Button"",
                    ""id"": ""177c50c2-36b4-4b6e-9153-e6717885aeef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drift"",
                    ""type"": ""Button"",
                    ""id"": ""69f5c8f8-ee93-4bdc-a470-0a172aa0e2de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""54d859e8-2334-4c55-bd28-74f22b886976"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""37e61bf7-10e3-4099-87b9-976f7336dd27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""04488348-3ca0-4035-a947-607c7234c4cc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""958e8279-4d55-43ad-bcda-46326407bd61"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""926019eb-e340-4fc5-91cb-1d3877ef0c6e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""c25fba4a-10fa-4238-9352-3daa948a68d6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""34df23d8-7ca0-478c-90d3-220d08c9830f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6d6f5759-761c-4dd1-bcdc-65613abd48c7"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""e68a9f64-356f-451c-9cf9-647d93c883f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a94da1a-5348-46d3-b61c-275b86016ccc"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75e7496c-49e8-465d-a8b3-b9e49ec7c27e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""e0b6e13c-7a3d-493e-a46f-590c7cdd764c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""972a3ddc-4c1e-4934-8350-9fc544ba62e9"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""50904f6f-c7ad-495c-b4cf-0c936b4cd1c1"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ac79453-e7a7-4ac1-bc2f-b5ee0cc8a8db"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1a4a06f-3535-418f-8fe5-5e70d38ab63a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d61b4c86-da22-41ec-b66e-e0c3d5337c43"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb7c9ffb-be09-4a1d-958f-9afe5404f01d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9d00f25-5940-430d-a63a-f470cbf29638"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Grind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977df584-6b6c-4a60-a3af-f085e8ffb7a2"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Grind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bff667a-4972-45b8-9dd0-58c03612cdfe"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""51bf6441-a8c2-4ee0-a07e-c22f11bab175"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Camera"",
            ""id"": ""cc428c01-fe64-4be6-9128-e6d8117b5952"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""07b8d1e4-e943-4104-8557-8131695adfcc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""PassThrough"",
                    ""id"": ""81fa164b-d7a6-4a43-92bd-2e4e01ee22b0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""f218418e-5936-4013-b8a1-374dd7b83dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""1cb89415-bc2a-4e8c-87da-bb7020b24a70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Right Stick"",
                    ""id"": ""11762a44-2170-4877-a33d-0dc8f41a48ab"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6a4ff376-46b3-4a28-b769-b77d544c3ef3"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a56ab50a-8227-49cb-bd6a-9f0d841550b9"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right Stick"",
                    ""id"": ""3879e24f-fec7-40dc-89d5-27ca1265b640"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""40ff606b-9484-4191-9919-0b3fef574b35"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""462c0efb-5eab-42ec-bf0f-e2768f2664a1"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""41b0c9dd-057e-4f95-b668-258be88704b8"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19b32d7a-bf55-4172-ac6d-fc2c421097dd"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Walk"",
            ""id"": ""79ce9ddf-637d-496e-93d5-97e526f6c520"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""54204db5-30ee-466e-981d-cdbda7177810"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3424a24b-3b3e-4f5e-87a0-939b5abfa469"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6035d198-0fd2-44d7-ac70-9d65adbcd70a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Controller Mode"",
                    ""type"": ""Button"",
                    ""id"": ""36fd082a-f1fa-4ac8-a74e-5af0889b2a1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""c4c8eac5-fa45-409f-bbba-2bd69ec30b97"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3e5eede3-2dc6-4b7b-9e11-c267d354d3fb"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""caf51add-8c0b-4908-99d7-e0a0b9fbe39d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""f1348c6c-3d40-46f9-813c-19839550c8a4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""09217284-50c2-4f57-8d0a-05e9ecdd34d1"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""087e7822-838f-4056-bd33-a430bae8f1d1"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""9a65b16c-cdc6-4f5e-96a5-dbad01bb6347"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""57add7f2-dbdd-44f6-b1d4-8e562c9d2c9b"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""584f60e2-25e7-4a6d-98bd-46011210717d"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""5f90976c-ac3d-4cc1-9b3f-0c2906ff6218"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f55e6b2c-cf72-4cc7-b555-c47589adfcd7"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3a68091a-8851-4636-be14-6142b057ccb7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""13dff465-ded7-44eb-9079-4b0b369e1683"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6970caa7-9959-491a-88e8-19668d3b94ff"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Swap Controller Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""30890742-4a99-446e-9e07-5a2fc0953908"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""957915c9-fed8-492f-8cf5-1df1d96e8174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Mode"",
                    ""type"": ""Button"",
                    ""id"": ""18beb3c4-b0c0-4c8f-889e-527f2da042b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""245d0897-68e5-4b2a-91e7-b9c6f5ff1076"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""badf6385-d7e4-4642-96cf-a675480586fa"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Swap Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Manette"",
            ""bindingGroup"": ""Manette"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Hover
            m_Hover = asset.FindActionMap("Hover", throwIfNotFound: true);
            m_Hover_Horizontal = m_Hover.FindAction("Horizontal", throwIfNotFound: true);
            m_Hover_Vertical = m_Hover.FindAction("Vertical", throwIfNotFound: true);
            m_Hover_Jump = m_Hover.FindAction("Jump", throwIfNotFound: true);
            m_Hover_Brake = m_Hover.FindAction("Brake", throwIfNotFound: true);
            m_Hover_Grind = m_Hover.FindAction("Grind", throwIfNotFound: true);
            m_Hover_Drift = m_Hover.FindAction("Drift", throwIfNotFound: true);
            m_Hover_Boost = m_Hover.FindAction("Boost", throwIfNotFound: true);
            m_Hover_Reverse = m_Hover.FindAction("Reverse", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Horizontal = m_Camera.FindAction("Horizontal", throwIfNotFound: true);
            m_Camera_Vertical = m_Camera.FindAction("Vertical", throwIfNotFound: true);
            m_Camera_Reverse = m_Camera.FindAction("Reverse", throwIfNotFound: true);
            m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
            // Walk
            m_Walk = asset.FindActionMap("Walk", throwIfNotFound: true);
            m_Walk_Horizontal = m_Walk.FindAction("Horizontal", throwIfNotFound: true);
            m_Walk_Vertical = m_Walk.FindAction("Vertical", throwIfNotFound: true);
            m_Walk_Jump = m_Walk.FindAction("Jump", throwIfNotFound: true);
            m_Walk_SwapControllerMode = m_Walk.FindAction("Swap Controller Mode", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
            m_Player_SwapMode = m_Player.FindAction("Swap Mode", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Hover
        private readonly InputActionMap m_Hover;
        private IHoverActions m_HoverActionsCallbackInterface;
        private readonly InputAction m_Hover_Horizontal;
        private readonly InputAction m_Hover_Vertical;
        private readonly InputAction m_Hover_Jump;
        private readonly InputAction m_Hover_Brake;
        private readonly InputAction m_Hover_Grind;
        private readonly InputAction m_Hover_Drift;
        private readonly InputAction m_Hover_Boost;
        private readonly InputAction m_Hover_Reverse;
        public struct HoverActions
        {
            private @InputControls m_Wrapper;
            public HoverActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_Hover_Horizontal;
            public InputAction @Vertical => m_Wrapper.m_Hover_Vertical;
            public InputAction @Jump => m_Wrapper.m_Hover_Jump;
            public InputAction @Brake => m_Wrapper.m_Hover_Brake;
            public InputAction @Grind => m_Wrapper.m_Hover_Grind;
            public InputAction @Drift => m_Wrapper.m_Hover_Drift;
            public InputAction @Boost => m_Wrapper.m_Hover_Boost;
            public InputAction @Reverse => m_Wrapper.m_Hover_Reverse;
            public InputActionMap Get() { return m_Wrapper.m_Hover; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HoverActions set) { return set.Get(); }
            public void SetCallbacks(IHoverActions instance)
            {
                if (m_Wrapper.m_HoverActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnHorizontal;
                    @Vertical.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnVertical;
                    @Vertical.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnVertical;
                    @Vertical.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnVertical;
                    @Jump.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnJump;
                    @Brake.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnBrake;
                    @Brake.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnBrake;
                    @Brake.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnBrake;
                    @Grind.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnGrind;
                    @Grind.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnGrind;
                    @Grind.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnGrind;
                    @Drift.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnDrift;
                    @Drift.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnDrift;
                    @Drift.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnDrift;
                    @Boost.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnBoost;
                    @Boost.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnBoost;
                    @Boost.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnBoost;
                    @Reverse.started -= m_Wrapper.m_HoverActionsCallbackInterface.OnReverse;
                    @Reverse.performed -= m_Wrapper.m_HoverActionsCallbackInterface.OnReverse;
                    @Reverse.canceled -= m_Wrapper.m_HoverActionsCallbackInterface.OnReverse;
                }
                m_Wrapper.m_HoverActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Vertical.started += instance.OnVertical;
                    @Vertical.performed += instance.OnVertical;
                    @Vertical.canceled += instance.OnVertical;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Brake.started += instance.OnBrake;
                    @Brake.performed += instance.OnBrake;
                    @Brake.canceled += instance.OnBrake;
                    @Grind.started += instance.OnGrind;
                    @Grind.performed += instance.OnGrind;
                    @Grind.canceled += instance.OnGrind;
                    @Drift.started += instance.OnDrift;
                    @Drift.performed += instance.OnDrift;
                    @Drift.canceled += instance.OnDrift;
                    @Boost.started += instance.OnBoost;
                    @Boost.performed += instance.OnBoost;
                    @Boost.canceled += instance.OnBoost;
                    @Reverse.started += instance.OnReverse;
                    @Reverse.performed += instance.OnReverse;
                    @Reverse.canceled += instance.OnReverse;
                }
            }
        }
        public HoverActions @Hover => new HoverActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        public struct UIActions
        {
            private @InputControls m_Wrapper;
            public UIActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public UIActions @UI => new UIActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Horizontal;
        private readonly InputAction m_Camera_Vertical;
        private readonly InputAction m_Camera_Reverse;
        private readonly InputAction m_Camera_Zoom;
        public struct CameraActions
        {
            private @InputControls m_Wrapper;
            public CameraActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_Camera_Horizontal;
            public InputAction @Vertical => m_Wrapper.m_Camera_Vertical;
            public InputAction @Reverse => m_Wrapper.m_Camera_Reverse;
            public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontal;
                    @Vertical.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnVertical;
                    @Vertical.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnVertical;
                    @Vertical.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnVertical;
                    @Reverse.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnReverse;
                    @Reverse.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnReverse;
                    @Reverse.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnReverse;
                    @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Vertical.started += instance.OnVertical;
                    @Vertical.performed += instance.OnVertical;
                    @Vertical.canceled += instance.OnVertical;
                    @Reverse.started += instance.OnReverse;
                    @Reverse.performed += instance.OnReverse;
                    @Reverse.canceled += instance.OnReverse;
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Walk
        private readonly InputActionMap m_Walk;
        private IWalkActions m_WalkActionsCallbackInterface;
        private readonly InputAction m_Walk_Horizontal;
        private readonly InputAction m_Walk_Vertical;
        private readonly InputAction m_Walk_Jump;
        private readonly InputAction m_Walk_SwapControllerMode;
        public struct WalkActions
        {
            private @InputControls m_Wrapper;
            public WalkActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Horizontal => m_Wrapper.m_Walk_Horizontal;
            public InputAction @Vertical => m_Wrapper.m_Walk_Vertical;
            public InputAction @Jump => m_Wrapper.m_Walk_Jump;
            public InputAction @SwapControllerMode => m_Wrapper.m_Walk_SwapControllerMode;
            public InputActionMap Get() { return m_Wrapper.m_Walk; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WalkActions set) { return set.Get(); }
            public void SetCallbacks(IWalkActions instance)
            {
                if (m_Wrapper.m_WalkActionsCallbackInterface != null)
                {
                    @Horizontal.started -= m_Wrapper.m_WalkActionsCallbackInterface.OnHorizontal;
                    @Horizontal.performed -= m_Wrapper.m_WalkActionsCallbackInterface.OnHorizontal;
                    @Horizontal.canceled -= m_Wrapper.m_WalkActionsCallbackInterface.OnHorizontal;
                    @Vertical.started -= m_Wrapper.m_WalkActionsCallbackInterface.OnVertical;
                    @Vertical.performed -= m_Wrapper.m_WalkActionsCallbackInterface.OnVertical;
                    @Vertical.canceled -= m_Wrapper.m_WalkActionsCallbackInterface.OnVertical;
                    @Jump.started -= m_Wrapper.m_WalkActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_WalkActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_WalkActionsCallbackInterface.OnJump;
                    @SwapControllerMode.started -= m_Wrapper.m_WalkActionsCallbackInterface.OnSwapControllerMode;
                    @SwapControllerMode.performed -= m_Wrapper.m_WalkActionsCallbackInterface.OnSwapControllerMode;
                    @SwapControllerMode.canceled -= m_Wrapper.m_WalkActionsCallbackInterface.OnSwapControllerMode;
                }
                m_Wrapper.m_WalkActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Horizontal.started += instance.OnHorizontal;
                    @Horizontal.performed += instance.OnHorizontal;
                    @Horizontal.canceled += instance.OnHorizontal;
                    @Vertical.started += instance.OnVertical;
                    @Vertical.performed += instance.OnVertical;
                    @Vertical.canceled += instance.OnVertical;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @SwapControllerMode.started += instance.OnSwapControllerMode;
                    @SwapControllerMode.performed += instance.OnSwapControllerMode;
                    @SwapControllerMode.canceled += instance.OnSwapControllerMode;
                }
            }
        }
        public WalkActions @Walk => new WalkActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Action;
        private readonly InputAction m_Player_SwapMode;
        public struct PlayerActions
        {
            private @InputControls m_Wrapper;
            public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Action => m_Wrapper.m_Player_Action;
            public InputAction @SwapMode => m_Wrapper.m_Player_SwapMode;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Action.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @Action.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @Action.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                    @SwapMode.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapMode;
                    @SwapMode.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapMode;
                    @SwapMode.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapMode;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Action.started += instance.OnAction;
                    @Action.performed += instance.OnAction;
                    @Action.canceled += instance.OnAction;
                    @SwapMode.started += instance.OnSwapMode;
                    @SwapMode.performed += instance.OnSwapMode;
                    @SwapMode.canceled += instance.OnSwapMode;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_ManetteSchemeIndex = -1;
        public InputControlScheme ManetteScheme
        {
            get
            {
                if (m_ManetteSchemeIndex == -1) m_ManetteSchemeIndex = asset.FindControlSchemeIndex("Manette");
                return asset.controlSchemes[m_ManetteSchemeIndex];
            }
        }
        public interface IHoverActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnVertical(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
            void OnGrind(InputAction.CallbackContext context);
            void OnDrift(InputAction.CallbackContext context);
            void OnBoost(InputAction.CallbackContext context);
            void OnReverse(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
        }
        public interface ICameraActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnVertical(InputAction.CallbackContext context);
            void OnReverse(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
        }
        public interface IWalkActions
        {
            void OnHorizontal(InputAction.CallbackContext context);
            void OnVertical(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnSwapControllerMode(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnAction(InputAction.CallbackContext context);
            void OnSwapMode(InputAction.CallbackContext context);
        }
    }
}
